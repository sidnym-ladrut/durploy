#compdef durploy
#autoload

# inpired by: https://git.zx2c4.com/password-store/tree/src/completion/pass.zsh-completion

_durploy () {
	local cmd
	if (( CURRENT > 2)); then
		cmd=${words[2]}
		# Set the context for the subcommand.
		curcontext="${curcontext%:*:*}:durploy-$cmd"
		# Narrow the range of words we are looking at to exclude `pass'
		(( CURRENT-- ))
		shift words
		# Run the completion for the subcommand
		case "${cmd}" in
			ship)
				_arguments : \
					+ '(help)' {-h,--help}'[Output help message]' \
					+ '(patp)' {-p,--patp}'[The @p (i.e. Urbit ID) of the ship to be deployed at the given path]:urbit id:(zod nec bud wes sev per sut let ful pen syt dur wep ser wyl sun ryp syx dyr nup heb peg lup dep dys put lug hec ryt tyv syd nex lun mep lut sep pes del sul ped tem led tul met wen byn hex feb pyl dul het mev rut tyl wyd tep bes dex sef wyc bur der nep pur rys reb den nut sub pet rul syn reg tyd sup sem wyn rec meg net sec mul nym tev web sum mut nyx rex teb fus hep ben mus wyx sym sel ruc dec wex syr wet dyl myn mes det bet bel tux tug myr pel syp ter meb set dut deg tex sur fel tud nux rux ren wyt nub med lyt dus neb rum tyn seg lyx pun res red fun rev ref mec ted rus bex leb dux ryn num pyx ryg ryx fep tyr tus tyc leg nem fer mer ten lus nus syl tec mex pub rym tuc fyl lep deb ber mug hut tun byl sud pem dev lur def bus bep run mel pex dyt byt typ lev myl wed duc fur fex nul luc len ner lex rup ned lec ryd lyd fen wel nyd hus rel rud nes hes fet des ret dun ler nyr seb hul ryl lud rem lys fyn wer ryc sug nys nyl lyn dyn dem lux fed sed bec mun lyr tes mud nyt byr sen weg fyr mur tel rep teg pec nel nev fes)' \
					+ '(nlevel)' {-n,--nuke}'[Run nuke with given severity prior to deployment]:nuke level:((
						0\:no-op
						1\:pier-only
						2\:pier-and-backup
					))'
				_durploy_complete_ships
				;;
			desk)
				_arguments : \
					+ '(help)' {-h,--help}'[Output help message]' \
					+ '(watch)' {-w,--watch}'[Monitor <desk-path> for changes and deploy continuously]' \
					+ '(glob)' {-g,--glob}'[Set the deployment to glob mode]' \
					+ '(rstrat)' {-r,--reset}'[Strategy for resetting apps on a desk]:nuke level:((
						always\:reset-each-on-each-change
						appsur\:reset-app-only-on-app-and-sur-change
						sur\:reset-app-only-on-sur-change
						never\:never-reset-on-change
					))' \
					'*:desk path:_files'
				# TODO: How do we allow wilcard completion for files here?
				;;
			nuke)
				_arguments : \
					+ '(help)' {-h,--help}'[Output help message]' \
					+ '(nlevel)' {-l,--level}'[Run nuke with given severity prior to deployment]:nuke level:((
						0\:no-op
						1\:pier-only
						2\:pier-and-backup
					))'
				_durploy_complete_ships
				;;
		esac
	else
		local -a subcommands
		subcommands=(
			"ship:Generate and run Urbit ships (w/ optional boot script(s))"
			"desk:Deploy desk files to running Urbit ships"
			"nuke:Remove previously deployed Urbit pier and its associated backup"
		)
		_describe -t commands 'durploy' subcommands
		_arguments : \
			+ '(version)' {-v,--version}'[Output version information]' \
			+ '(help)' {-h,--help}'[Output help message]' \
			# FIXME:
			# + '(binary)' {-b,--binary}'[Set the Urbit binary to be used for deploying ships/desks]' \
	fi
}

_durploy_complete_ships () {
	local IFS=$'\n'
	_values 'ship directories' $(find $HOME/.cache/durploy/ships -name '.urb' -exec \
		realpath --relative-to $HOME/.cache/durploy/ships {} \; | awk -F'/' '{print $1;}')
}

_durploy
